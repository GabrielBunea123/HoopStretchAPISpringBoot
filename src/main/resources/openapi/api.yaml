openapi: 3.0.3
info:
  title: HoopStretch API
  version: 1.0.0
  description: Stretching app backend API

servers:
  - url: http://localhost:8080

security:
  - cookieAuth: [ ]

paths:
  /users/user-info/{id}:
    get:
      tags:
        - UserController
      summary: Get user info
      operationId: getUserInfo
      description: Returns user data for a given user ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponseDto'
        '404':
          description: User not found
        '400':
          description: Bad request
  /users/register:
    post:
      summary: Register a new user
      operationId: registerUser
      description: Creates a new user account.
      tags:
        - UserController
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequestDto'
      responses:
        "201":
          description: User successfully registered, no content returned
        "400":
          description: Invalid input data
  /auth/login:
    post:
      summary: Log user in
      operationId: login
      description: Log user in
      tags:
        - UserController
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequestDto'
      responses:
        "200":
          description: User authenticated successfully
        "400":
          description: Invalid input data
        "401":
          description: Unauthorized login
        "403":
          description: Access forbidden

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: access_token
  schemas:
    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        username:
          type: string
          example: john_doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        display_name:
          type: string
          example: John Doe
    UserRegisterRequestDto:
      type: object
      required:
        - username
        - email
        - provider
        - password
      properties:
        username:
          type: string
          example: john_doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        provider:
          type: string
          example: EMAIL
        password:
          type: string
          format: password
          example: StrongPassword123!
    UserLoginRequestDto:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: john_doe
        password:
          type: string
          format: password
          example: StrongPassword123!

#paths:
#  /api/user-info:
#    get:
#      summary: Get authenticated user info
#      security:
#        - googleOAuth: []
#      responses:
#        '200':
#          description: OK
#        '401':
#          description: Unauthorized
#
#components:
#  securitySchemes:
#    googleOAuth:
#      type: oauth2
#      flows:
#        authorizationCode:
#          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
#          tokenUrl: https://oauth2.googleapis.com/token
#          scopes:
#            openid: Access identity
#            profile: Access profile info
#            email: Access email address